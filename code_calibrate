#include <Arduino.h>
#include <rdm6300.h>

// === Constants ===
#define ENTRY_RFID_RX 5
#define EXIT_RFID_RX 14
#define IR_ENTER_PIN 18
#define IR_EXIT_PIN 19
#define GATE_PIN 21
#define DUAL_SCAN_WINDOW 100    // 100ms for dual scan detection
#define MOVEMENT_TIMEOUT 60000  // 60 seconds
#define PARTIAL_PASS_TIMEOUT 60000

// === State Enums ===
enum SystemPhase {
  PHASE_IDLE,
  PHASE_ENTRY_PROCESSING,
  PHASE_EXIT_PROCESSING
};

// === Global Variables ===
Rdm6300 enter_rfid;
Rdm6300 exit_rfid;
SystemPhase current_phase = PHASE_IDLE;

unsigned long last_entry_scan = 0;
unsigned long last_exit_scan = 0;
unsigned long movement_timer = 0;
unsigned long partial_pass_timer = 0;
unsigned long gate_opened_time = 0;

int ir_enter_threshold = 500;
int ir_exit_threshold = 500;
uint8_t tailgate_count = 0;
bool expected_exit_ir = false;
bool expected_entry_ir = false;

// === Helper Functions ===
void open_gate() {
  digitalWrite(GATE_PIN, HIGH);
  gate_opened_time = millis();
  Serial.println("GATE OPENED");
}

void close_gate() {
  digitalWrite(GATE_PIN, LOW);
  current_phase = PHASE_IDLE;
  tailgate_count = 0;
  Serial.println("GATE CLOSED");
}

void log_event(const char* message) {
  Serial.print("[EVENT] ");
  Serial.println(message);
}

// === Core Logic ===
void handle_entry_scan() {
  if (millis() - last_exit_scan <= DUAL_SCAN_WINDOW) {
    log_event("Dual entry collision detected");
    return;
  }

  if (analogRead(IR_EXIT_PIN) < ir_exit_threshold) {
    log_event("Trespasser at exit - Entry denied");
    close_gate();
    return;
  }

  open_gate();
  current_phase = PHASE_ENTRY_PROCESSING;
  expected_exit_ir = true;
  partial_pass_timer = millis();
  movement_timer = millis();
}

void handle_exit_scan() {
  if (millis() - last_entry_scan <= DUAL_SCAN_WINDOW) {
    log_event("Dual exit collision detected");
    return;
  }

  open_gate();
  current_phase = PHASE_EXIT_PROCESSING;
  expected_entry_ir = true;
  partial_pass_timer = millis();
  movement_timer = millis();
}

void check_ir_sensors() {
  bool entry_triggered = analogRead(IR_ENTER_PIN) < ir_enter_threshold;
  bool exit_triggered = analogRead(IR_EXIT_PIN) < ir_exit_threshold;

  // Movement detection
  if (entry_triggered || exit_triggered) {
    movement_timer = millis();
  }

  // Sequence validation
  switch (current_phase) {
    case PHASE_ENTRY_PROCESSING:
      if (exit_triggered && !expected_exit_ir) {
        log_event("Wrong direction detected (exit first)");
        close_gate();
      }
      if (entry_triggered) {
        tailgate_count++;
        if (tailgate_count > 1) {
          log_event("Tailgating detected at entry");
          close_gate();
        }
      }
      break;

    case PHASE_EXIT_PROCESSING:
      if (entry_triggered && !expected_entry_ir) {
        log_event("Wrong direction detected (entry first)");
        close_gate();
      }
      if (exit_triggered) {
        tailgate_count++;
        if (tailgate_count > 1) {
          log_event("Tailgating detected at exit");
          close_gate();
        }
      }
      break;

    default: break;
  }
}

void check_timeouts() {
  unsigned long now = millis();
  
  // General movement timeout
  if (now - movement_timer > MOVEMENT_TIMEOUT) {
    log_event("No movement timeout");
    close_gate();
  }

  // Partial pass detection
  if (current_phase != PHASE_IDLE && (now - partial_pass_timer > PARTIAL_PASS_TIMEOUT)) {
    log_event("Partial pass detected");
    close_gate();
  }
}

// === Main Functions ===
void setup() {
  Serial.begin(115200);
  pinMode(GATE_PIN, OUTPUT);
  close_gate();

  enter_rfid.begin(ENTRY_RFID_RX, 1);
  exit_rfid.begin(EXIT_RFID_RX, 2);

  // Calibration (should be done with no objects present)
  ir_enter_threshold = analogRead(IR_ENTER_PIN) + 100;
  ir_exit_threshold = analogRead(IR_EXIT_PIN) + 100;
}

void loop() {
  // RFID Handling
  if (enter_rfid.available()) {
    last_entry_scan = millis();
    handle_entry_scan();
    enter_rfid.read(); // Clear buffer
  }

  if (exit_rfid.available()) {
    last_exit_scan = millis();
    handle_exit_scan();
    exit_rfid.read(); // Clear buffer
  }

  // Sensor Checks
  check_ir_sensors();
  check_timeouts();
}
